generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model Patient {
  @@map("patients")
  mrn         String  @id
  firstname   String
  lastname    String
  sex         String  // Enum not supported in sqlite but should be "male", "female" or "other"
  dob         String

  status      String // Enum not support in sqlite but should be "assess", "present", "waitlist", "monitor", "discharge"

  generalPractitionerName     String?
  primaryCardiologistName     String?
  structuralCardiologistName  String?

  height      Int?
  weight      Int?

  diagnosis     String?
  summary       String?

  clinicalHistory    String?
  pastHistory        String?
  medications        String?
  allergies          String?

  NYHA                    Int?
  angina                  Boolean?
  syncope                 Boolean?
  heartFailureAdmission   Boolean?
  orthopnea               Boolean?
  PND                     Boolean?

  heartFailure                      Boolean?
  heartFailureDetails               String?
  IHD                               Boolean?
  IHDDetails                        String?
  previousMI                        Boolean?
  previousPCI                       Boolean?
  PCIDetails                        String?
  previousCardiacSurgery            String?
  cardiacSurgeryDetails             String?
  previousCABG                      Boolean?
  previousSAVR                      Boolean?
  previousStructuralIntervention    Boolean?
  structuralInterventionDetails     String?
  previousTAVI                      Boolean?
  previousBAV                       Boolean?
  AF                                Boolean?
  AFDetails                         String?
  implantableCardiacDevice          Boolean?
  implantableCardiacDeviceDetails   String?
  previousStrokeOrTIA               Boolean?
  strokeAndTIADetails               String?
  carotidArteryDisease              Boolean?
  carotidArteryDiseaseDetails       String?
  peripheralArteryDisease           Boolean?
  peripheralArteryDiseaseDetails    String?
  smoker                            String?  // Enum not supported in sqlite but should be "current", "recent", "former" or "never"
  lungDisease                       Boolean?
  lungDiseaseDetails                String?
  hypertension                      Boolean?
  diabetes                          String? // Enum not supported in sqlite but should be "no", "typeI" or "typeII"
  chronicKidneyDisease              Boolean?
  dialysis                          String? // Enum not supported in sqlite but should be "no", "peritoneal" or "haemo"

  porcelainAorta      Boolean?
  hostileChest        Boolean?
  chestRadiotherapy   Boolean?
  steroids            Boolean?



  // generalPractitionerId     Int?
  // primaryCardiologistId     Int?
  // structuralCardiologistId  Int?

  // generalPractitioner     Doctor?  @relation("GPRelationship", fields: [generalPractitionerId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  // primaryCardiologist     Doctor?  @relation("PCRelationship", fields: [primaryCardiologistId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  // structuralCardiologist  Doctor?  @relation("SCRelationship", fields: [structuralCardiologistId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  conference    Conference[]
  workup        Workup?
}


// model Doctor {
//   id      Int   @id @default(autoincrement())
//   name    String
//   email   String?

//   patientsAsGP                      Patient[]  @relation("GPRelationship")
//   patientsAsPrimaryCardiologist     Patient[]  @relation("PCRelationship")
//   patientsAsStructuralCardiologist  Patient[]  @relation("SCRelationship")
// }

model Workup {
  @@map("workups")
  id  Int @id @default(autoincrement())
  patientId String  @unique

  patient   Patient   @relation(fields: [patientId], references: [mrn])
}


model Conference {
  @@map("conferences")
  id    Int   @id @default(autoincrement())
  date  DateTime?
  diagnosis   String
  proposal    String

  patientId   String

  patient   Patient   @relation(fields: [patientId], references: [mrn])
}